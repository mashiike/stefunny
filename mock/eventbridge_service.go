// Code generated by MockGen. DO NOT EDIT.
// Source: eventbridge_service.go
//
// Generated by this command:
//
//	mockgen -source=eventbridge_service.go -destination=./mock/eventbridge_service.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	eventbridge "github.com/aws/aws-sdk-go-v2/service/eventbridge"
	stefunny "github.com/mashiike/stefunny"
	gomock "go.uber.org/mock/gomock"
)

// MockEventBridgeClient is a mock of EventBridgeClient interface.
type MockEventBridgeClient struct {
	ctrl     *gomock.Controller
	recorder *MockEventBridgeClientMockRecorder
	isgomock struct{}
}

// MockEventBridgeClientMockRecorder is the mock recorder for MockEventBridgeClient.
type MockEventBridgeClientMockRecorder struct {
	mock *MockEventBridgeClient
}

// NewMockEventBridgeClient creates a new mock instance.
func NewMockEventBridgeClient(ctrl *gomock.Controller) *MockEventBridgeClient {
	mock := &MockEventBridgeClient{ctrl: ctrl}
	mock.recorder = &MockEventBridgeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventBridgeClient) EXPECT() *MockEventBridgeClientMockRecorder {
	return m.recorder
}

// DeleteRule mocks base method.
func (m *MockEventBridgeClient) DeleteRule(ctx context.Context, params *eventbridge.DeleteRuleInput, optFns ...func(*eventbridge.Options)) (*eventbridge.DeleteRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRule", varargs...)
	ret0, _ := ret[0].(*eventbridge.DeleteRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRule indicates an expected call of DeleteRule.
func (mr *MockEventBridgeClientMockRecorder) DeleteRule(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRule", reflect.TypeOf((*MockEventBridgeClient)(nil).DeleteRule), varargs...)
}

// DescribeRule mocks base method.
func (m *MockEventBridgeClient) DescribeRule(ctx context.Context, params *eventbridge.DescribeRuleInput, optFns ...func(*eventbridge.Options)) (*eventbridge.DescribeRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRule", varargs...)
	ret0, _ := ret[0].(*eventbridge.DescribeRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRule indicates an expected call of DescribeRule.
func (mr *MockEventBridgeClientMockRecorder) DescribeRule(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRule", reflect.TypeOf((*MockEventBridgeClient)(nil).DescribeRule), varargs...)
}

// ListRuleNamesByTarget mocks base method.
func (m *MockEventBridgeClient) ListRuleNamesByTarget(ctx context.Context, params *eventbridge.ListRuleNamesByTargetInput, optFns ...func(*eventbridge.Options)) (*eventbridge.ListRuleNamesByTargetOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRuleNamesByTarget", varargs...)
	ret0, _ := ret[0].(*eventbridge.ListRuleNamesByTargetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRuleNamesByTarget indicates an expected call of ListRuleNamesByTarget.
func (mr *MockEventBridgeClientMockRecorder) ListRuleNamesByTarget(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRuleNamesByTarget", reflect.TypeOf((*MockEventBridgeClient)(nil).ListRuleNamesByTarget), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockEventBridgeClient) ListTagsForResource(ctx context.Context, params *eventbridge.ListTagsForResourceInput, optFns ...func(*eventbridge.Options)) (*eventbridge.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*eventbridge.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockEventBridgeClientMockRecorder) ListTagsForResource(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockEventBridgeClient)(nil).ListTagsForResource), varargs...)
}

// ListTargetsByRule mocks base method.
func (m *MockEventBridgeClient) ListTargetsByRule(ctx context.Context, params *eventbridge.ListTargetsByRuleInput, optFns ...func(*eventbridge.Options)) (*eventbridge.ListTargetsByRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTargetsByRule", varargs...)
	ret0, _ := ret[0].(*eventbridge.ListTargetsByRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTargetsByRule indicates an expected call of ListTargetsByRule.
func (mr *MockEventBridgeClientMockRecorder) ListTargetsByRule(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTargetsByRule", reflect.TypeOf((*MockEventBridgeClient)(nil).ListTargetsByRule), varargs...)
}

// PutRule mocks base method.
func (m *MockEventBridgeClient) PutRule(ctx context.Context, params *eventbridge.PutRuleInput, optFns ...func(*eventbridge.Options)) (*eventbridge.PutRuleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutRule", varargs...)
	ret0, _ := ret[0].(*eventbridge.PutRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutRule indicates an expected call of PutRule.
func (mr *MockEventBridgeClientMockRecorder) PutRule(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRule", reflect.TypeOf((*MockEventBridgeClient)(nil).PutRule), varargs...)
}

// PutTargets mocks base method.
func (m *MockEventBridgeClient) PutTargets(ctx context.Context, params *eventbridge.PutTargetsInput, optFns ...func(*eventbridge.Options)) (*eventbridge.PutTargetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutTargets", varargs...)
	ret0, _ := ret[0].(*eventbridge.PutTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutTargets indicates an expected call of PutTargets.
func (mr *MockEventBridgeClientMockRecorder) PutTargets(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutTargets", reflect.TypeOf((*MockEventBridgeClient)(nil).PutTargets), varargs...)
}

// RemoveTargets mocks base method.
func (m *MockEventBridgeClient) RemoveTargets(ctx context.Context, params *eventbridge.RemoveTargetsInput, optFns ...func(*eventbridge.Options)) (*eventbridge.RemoveTargetsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveTargets", varargs...)
	ret0, _ := ret[0].(*eventbridge.RemoveTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTargets indicates an expected call of RemoveTargets.
func (mr *MockEventBridgeClientMockRecorder) RemoveTargets(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTargets", reflect.TypeOf((*MockEventBridgeClient)(nil).RemoveTargets), varargs...)
}

// TagResource mocks base method.
func (m *MockEventBridgeClient) TagResource(ctx context.Context, params *eventbridge.TagResourceInput, optFns ...func(*eventbridge.Options)) (*eventbridge.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResource", varargs...)
	ret0, _ := ret[0].(*eventbridge.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockEventBridgeClientMockRecorder) TagResource(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockEventBridgeClient)(nil).TagResource), varargs...)
}

// MockEventBridgeService is a mock of EventBridgeService interface.
type MockEventBridgeService struct {
	ctrl     *gomock.Controller
	recorder *MockEventBridgeServiceMockRecorder
	isgomock struct{}
}

// MockEventBridgeServiceMockRecorder is the mock recorder for MockEventBridgeService.
type MockEventBridgeServiceMockRecorder struct {
	mock *MockEventBridgeService
}

// NewMockEventBridgeService creates a new mock instance.
func NewMockEventBridgeService(ctrl *gomock.Controller) *MockEventBridgeService {
	mock := &MockEventBridgeService{ctrl: ctrl}
	mock.recorder = &MockEventBridgeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventBridgeService) EXPECT() *MockEventBridgeServiceMockRecorder {
	return m.recorder
}

// DeployRules mocks base method.
func (m *MockEventBridgeService) DeployRules(ctx context.Context, stateMachineArn string, rules stefunny.EventBridgeRules, keepState bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployRules", ctx, stateMachineArn, rules, keepState)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeployRules indicates an expected call of DeployRules.
func (mr *MockEventBridgeServiceMockRecorder) DeployRules(ctx, stateMachineArn, rules, keepState any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployRules", reflect.TypeOf((*MockEventBridgeService)(nil).DeployRules), ctx, stateMachineArn, rules, keepState)
}

// SearchRelatedRules mocks base method.
func (m *MockEventBridgeService) SearchRelatedRules(ctx context.Context, params *stefunny.SearchRelatedRulesInput) (stefunny.EventBridgeRules, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchRelatedRules", ctx, params)
	ret0, _ := ret[0].(stefunny.EventBridgeRules)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchRelatedRules indicates an expected call of SearchRelatedRules.
func (mr *MockEventBridgeServiceMockRecorder) SearchRelatedRules(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchRelatedRules", reflect.TypeOf((*MockEventBridgeService)(nil).SearchRelatedRules), ctx, params)
}
