// Code generated by MockGen. DO NOT EDIT.
// Source: sfn_service.go
//
// Generated by this command:
//
//	mockgen -source=sfn_service.go -destination=./mock/sfn_service.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	sfn "github.com/aws/aws-sdk-go-v2/service/sfn"
	stefunny "github.com/mashiike/stefunny"
	gomock "go.uber.org/mock/gomock"
)

// MockSFnClient is a mock of SFnClient interface.
type MockSFnClient struct {
	ctrl     *gomock.Controller
	recorder *MockSFnClientMockRecorder
	isgomock struct{}
}

// MockSFnClientMockRecorder is the mock recorder for MockSFnClient.
type MockSFnClientMockRecorder struct {
	mock *MockSFnClient
}

// NewMockSFnClient creates a new mock instance.
func NewMockSFnClient(ctrl *gomock.Controller) *MockSFnClient {
	mock := &MockSFnClient{ctrl: ctrl}
	mock.recorder = &MockSFnClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSFnClient) EXPECT() *MockSFnClientMockRecorder {
	return m.recorder
}

// CreateStateMachine mocks base method.
func (m *MockSFnClient) CreateStateMachine(ctx context.Context, params *sfn.CreateStateMachineInput, optFns ...func(*sfn.Options)) (*sfn.CreateStateMachineOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateStateMachine", varargs...)
	ret0, _ := ret[0].(*sfn.CreateStateMachineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStateMachine indicates an expected call of CreateStateMachine.
func (mr *MockSFnClientMockRecorder) CreateStateMachine(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStateMachine", reflect.TypeOf((*MockSFnClient)(nil).CreateStateMachine), varargs...)
}

// CreateStateMachineAlias mocks base method.
func (m *MockSFnClient) CreateStateMachineAlias(ctx context.Context, params *sfn.CreateStateMachineAliasInput, optFns ...func(*sfn.Options)) (*sfn.CreateStateMachineAliasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateStateMachineAlias", varargs...)
	ret0, _ := ret[0].(*sfn.CreateStateMachineAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStateMachineAlias indicates an expected call of CreateStateMachineAlias.
func (mr *MockSFnClientMockRecorder) CreateStateMachineAlias(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStateMachineAlias", reflect.TypeOf((*MockSFnClient)(nil).CreateStateMachineAlias), varargs...)
}

// DeleteStateMachine mocks base method.
func (m *MockSFnClient) DeleteStateMachine(ctx context.Context, params *sfn.DeleteStateMachineInput, optFns ...func(*sfn.Options)) (*sfn.DeleteStateMachineOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteStateMachine", varargs...)
	ret0, _ := ret[0].(*sfn.DeleteStateMachineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStateMachine indicates an expected call of DeleteStateMachine.
func (mr *MockSFnClientMockRecorder) DeleteStateMachine(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStateMachine", reflect.TypeOf((*MockSFnClient)(nil).DeleteStateMachine), varargs...)
}

// DeleteStateMachineVersion mocks base method.
func (m *MockSFnClient) DeleteStateMachineVersion(ctx context.Context, params *sfn.DeleteStateMachineVersionInput, optFns ...func(*sfn.Options)) (*sfn.DeleteStateMachineVersionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteStateMachineVersion", varargs...)
	ret0, _ := ret[0].(*sfn.DeleteStateMachineVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStateMachineVersion indicates an expected call of DeleteStateMachineVersion.
func (mr *MockSFnClientMockRecorder) DeleteStateMachineVersion(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStateMachineVersion", reflect.TypeOf((*MockSFnClient)(nil).DeleteStateMachineVersion), varargs...)
}

// DescribeExecution mocks base method.
func (m *MockSFnClient) DescribeExecution(ctx context.Context, params *sfn.DescribeExecutionInput, optFns ...func(*sfn.Options)) (*sfn.DescribeExecutionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeExecution", varargs...)
	ret0, _ := ret[0].(*sfn.DescribeExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeExecution indicates an expected call of DescribeExecution.
func (mr *MockSFnClientMockRecorder) DescribeExecution(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeExecution", reflect.TypeOf((*MockSFnClient)(nil).DescribeExecution), varargs...)
}

// DescribeStateMachine mocks base method.
func (m *MockSFnClient) DescribeStateMachine(ctx context.Context, params *sfn.DescribeStateMachineInput, optFns ...func(*sfn.Options)) (*sfn.DescribeStateMachineOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStateMachine", varargs...)
	ret0, _ := ret[0].(*sfn.DescribeStateMachineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStateMachine indicates an expected call of DescribeStateMachine.
func (mr *MockSFnClientMockRecorder) DescribeStateMachine(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStateMachine", reflect.TypeOf((*MockSFnClient)(nil).DescribeStateMachine), varargs...)
}

// DescribeStateMachineAlias mocks base method.
func (m *MockSFnClient) DescribeStateMachineAlias(ctx context.Context, params *sfn.DescribeStateMachineAliasInput, optFns ...func(*sfn.Options)) (*sfn.DescribeStateMachineAliasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStateMachineAlias", varargs...)
	ret0, _ := ret[0].(*sfn.DescribeStateMachineAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStateMachineAlias indicates an expected call of DescribeStateMachineAlias.
func (mr *MockSFnClientMockRecorder) DescribeStateMachineAlias(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStateMachineAlias", reflect.TypeOf((*MockSFnClient)(nil).DescribeStateMachineAlias), varargs...)
}

// GetExecutionHistory mocks base method.
func (m *MockSFnClient) GetExecutionHistory(ctx context.Context, params *sfn.GetExecutionHistoryInput, optFns ...func(*sfn.Options)) (*sfn.GetExecutionHistoryOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExecutionHistory", varargs...)
	ret0, _ := ret[0].(*sfn.GetExecutionHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutionHistory indicates an expected call of GetExecutionHistory.
func (mr *MockSFnClientMockRecorder) GetExecutionHistory(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionHistory", reflect.TypeOf((*MockSFnClient)(nil).GetExecutionHistory), varargs...)
}

// ListStateMachineAliases mocks base method.
func (m *MockSFnClient) ListStateMachineAliases(ctx context.Context, params *sfn.ListStateMachineAliasesInput, optFns ...func(*sfn.Options)) (*sfn.ListStateMachineAliasesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStateMachineAliases", varargs...)
	ret0, _ := ret[0].(*sfn.ListStateMachineAliasesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStateMachineAliases indicates an expected call of ListStateMachineAliases.
func (mr *MockSFnClientMockRecorder) ListStateMachineAliases(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStateMachineAliases", reflect.TypeOf((*MockSFnClient)(nil).ListStateMachineAliases), varargs...)
}

// ListStateMachineVersions mocks base method.
func (m *MockSFnClient) ListStateMachineVersions(ctx context.Context, params *sfn.ListStateMachineVersionsInput, optFns ...func(*sfn.Options)) (*sfn.ListStateMachineVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStateMachineVersions", varargs...)
	ret0, _ := ret[0].(*sfn.ListStateMachineVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStateMachineVersions indicates an expected call of ListStateMachineVersions.
func (mr *MockSFnClientMockRecorder) ListStateMachineVersions(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStateMachineVersions", reflect.TypeOf((*MockSFnClient)(nil).ListStateMachineVersions), varargs...)
}

// ListStateMachines mocks base method.
func (m *MockSFnClient) ListStateMachines(arg0 context.Context, arg1 *sfn.ListStateMachinesInput, arg2 ...func(*sfn.Options)) (*sfn.ListStateMachinesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStateMachines", varargs...)
	ret0, _ := ret[0].(*sfn.ListStateMachinesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStateMachines indicates an expected call of ListStateMachines.
func (mr *MockSFnClientMockRecorder) ListStateMachines(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStateMachines", reflect.TypeOf((*MockSFnClient)(nil).ListStateMachines), varargs...)
}

// ListTagsForResource mocks base method.
func (m *MockSFnClient) ListTagsForResource(ctx context.Context, params *sfn.ListTagsForResourceInput, optFns ...func(*sfn.Options)) (*sfn.ListTagsForResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForResource", varargs...)
	ret0, _ := ret[0].(*sfn.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForResource indicates an expected call of ListTagsForResource.
func (mr *MockSFnClientMockRecorder) ListTagsForResource(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForResource", reflect.TypeOf((*MockSFnClient)(nil).ListTagsForResource), varargs...)
}

// StartExecution mocks base method.
func (m *MockSFnClient) StartExecution(ctx context.Context, params *sfn.StartExecutionInput, optFns ...func(*sfn.Options)) (*sfn.StartExecutionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartExecution", varargs...)
	ret0, _ := ret[0].(*sfn.StartExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartExecution indicates an expected call of StartExecution.
func (mr *MockSFnClientMockRecorder) StartExecution(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartExecution", reflect.TypeOf((*MockSFnClient)(nil).StartExecution), varargs...)
}

// StartSyncExecution mocks base method.
func (m *MockSFnClient) StartSyncExecution(ctx context.Context, params *sfn.StartSyncExecutionInput, optFns ...func(*sfn.Options)) (*sfn.StartSyncExecutionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartSyncExecution", varargs...)
	ret0, _ := ret[0].(*sfn.StartSyncExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSyncExecution indicates an expected call of StartSyncExecution.
func (mr *MockSFnClientMockRecorder) StartSyncExecution(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSyncExecution", reflect.TypeOf((*MockSFnClient)(nil).StartSyncExecution), varargs...)
}

// StopExecution mocks base method.
func (m *MockSFnClient) StopExecution(ctx context.Context, params *sfn.StopExecutionInput, optFns ...func(*sfn.Options)) (*sfn.StopExecutionOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopExecution", varargs...)
	ret0, _ := ret[0].(*sfn.StopExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopExecution indicates an expected call of StopExecution.
func (mr *MockSFnClientMockRecorder) StopExecution(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopExecution", reflect.TypeOf((*MockSFnClient)(nil).StopExecution), varargs...)
}

// TagResource mocks base method.
func (m *MockSFnClient) TagResource(ctx context.Context, params *sfn.TagResourceInput, optFns ...func(*sfn.Options)) (*sfn.TagResourceOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TagResource", varargs...)
	ret0, _ := ret[0].(*sfn.TagResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagResource indicates an expected call of TagResource.
func (mr *MockSFnClientMockRecorder) TagResource(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagResource", reflect.TypeOf((*MockSFnClient)(nil).TagResource), varargs...)
}

// UpdateStateMachine mocks base method.
func (m *MockSFnClient) UpdateStateMachine(ctx context.Context, params *sfn.UpdateStateMachineInput, optFns ...func(*sfn.Options)) (*sfn.UpdateStateMachineOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateStateMachine", varargs...)
	ret0, _ := ret[0].(*sfn.UpdateStateMachineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStateMachine indicates an expected call of UpdateStateMachine.
func (mr *MockSFnClientMockRecorder) UpdateStateMachine(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStateMachine", reflect.TypeOf((*MockSFnClient)(nil).UpdateStateMachine), varargs...)
}

// UpdateStateMachineAlias mocks base method.
func (m *MockSFnClient) UpdateStateMachineAlias(ctx context.Context, params *sfn.UpdateStateMachineAliasInput, optFns ...func(*sfn.Options)) (*sfn.UpdateStateMachineAliasOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateStateMachineAlias", varargs...)
	ret0, _ := ret[0].(*sfn.UpdateStateMachineAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStateMachineAlias indicates an expected call of UpdateStateMachineAlias.
func (mr *MockSFnClientMockRecorder) UpdateStateMachineAlias(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStateMachineAlias", reflect.TypeOf((*MockSFnClient)(nil).UpdateStateMachineAlias), varargs...)
}

// MockSFnService is a mock of SFnService interface.
type MockSFnService struct {
	ctrl     *gomock.Controller
	recorder *MockSFnServiceMockRecorder
	isgomock struct{}
}

// MockSFnServiceMockRecorder is the mock recorder for MockSFnService.
type MockSFnServiceMockRecorder struct {
	mock *MockSFnService
}

// NewMockSFnService creates a new mock instance.
func NewMockSFnService(ctrl *gomock.Controller) *MockSFnService {
	mock := &MockSFnService{ctrl: ctrl}
	mock.recorder = &MockSFnServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSFnService) EXPECT() *MockSFnServiceMockRecorder {
	return m.recorder
}

// DeleteStateMachine mocks base method.
func (m *MockSFnService) DeleteStateMachine(ctx context.Context, stateMachine *stefunny.StateMachine) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStateMachine", ctx, stateMachine)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStateMachine indicates an expected call of DeleteStateMachine.
func (mr *MockSFnServiceMockRecorder) DeleteStateMachine(ctx, stateMachine any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStateMachine", reflect.TypeOf((*MockSFnService)(nil).DeleteStateMachine), ctx, stateMachine)
}

// DeployStateMachine mocks base method.
func (m *MockSFnService) DeployStateMachine(ctx context.Context, stateMachine *stefunny.StateMachine) (*stefunny.DeployStateMachineOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployStateMachine", ctx, stateMachine)
	ret0, _ := ret[0].(*stefunny.DeployStateMachineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeployStateMachine indicates an expected call of DeployStateMachine.
func (mr *MockSFnServiceMockRecorder) DeployStateMachine(ctx, stateMachine any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployStateMachine", reflect.TypeOf((*MockSFnService)(nil).DeployStateMachine), ctx, stateMachine)
}

// DescribeStateMachine mocks base method.
func (m *MockSFnService) DescribeStateMachine(ctx context.Context, params *stefunny.DescribeStateMachineInput) (*stefunny.StateMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeStateMachine", ctx, params)
	ret0, _ := ret[0].(*stefunny.StateMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStateMachine indicates an expected call of DescribeStateMachine.
func (mr *MockSFnServiceMockRecorder) DescribeStateMachine(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStateMachine", reflect.TypeOf((*MockSFnService)(nil).DescribeStateMachine), ctx, params)
}

// GetExecutionHistory mocks base method.
func (m *MockSFnService) GetExecutionHistory(ctx context.Context, executionArn string) ([]stefunny.HistoryEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecutionHistory", ctx, executionArn)
	ret0, _ := ret[0].([]stefunny.HistoryEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecutionHistory indicates an expected call of GetExecutionHistory.
func (mr *MockSFnServiceMockRecorder) GetExecutionHistory(ctx, executionArn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionHistory", reflect.TypeOf((*MockSFnService)(nil).GetExecutionHistory), ctx, executionArn)
}

// GetStateMachineArn mocks base method.
func (m *MockSFnService) GetStateMachineArn(ctx context.Context, params *stefunny.GetStateMachineArnInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateMachineArn", ctx, params)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStateMachineArn indicates an expected call of GetStateMachineArn.
func (mr *MockSFnServiceMockRecorder) GetStateMachineArn(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateMachineArn", reflect.TypeOf((*MockSFnService)(nil).GetStateMachineArn), ctx, params)
}

// ListStateMachineVersions mocks base method.
func (m *MockSFnService) ListStateMachineVersions(ctx context.Context, stateMachine *stefunny.StateMachine) (*stefunny.ListStateMachineVersionsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStateMachineVersions", ctx, stateMachine)
	ret0, _ := ret[0].(*stefunny.ListStateMachineVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStateMachineVersions indicates an expected call of ListStateMachineVersions.
func (mr *MockSFnServiceMockRecorder) ListStateMachineVersions(ctx, stateMachine any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStateMachineVersions", reflect.TypeOf((*MockSFnService)(nil).ListStateMachineVersions), ctx, stateMachine)
}

// PurgeStateMachineVersions mocks base method.
func (m *MockSFnService) PurgeStateMachineVersions(ctx context.Context, stateMachine *stefunny.StateMachine, keepVersions int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurgeStateMachineVersions", ctx, stateMachine, keepVersions)
	ret0, _ := ret[0].(error)
	return ret0
}

// PurgeStateMachineVersions indicates an expected call of PurgeStateMachineVersions.
func (mr *MockSFnServiceMockRecorder) PurgeStateMachineVersions(ctx, stateMachine, keepVersions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurgeStateMachineVersions", reflect.TypeOf((*MockSFnService)(nil).PurgeStateMachineVersions), ctx, stateMachine, keepVersions)
}

// RollbackStateMachine mocks base method.
func (m *MockSFnService) RollbackStateMachine(ctx context.Context, stateMachine *stefunny.StateMachine, keepVersion, dryRun bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackStateMachine", ctx, stateMachine, keepVersion, dryRun)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackStateMachine indicates an expected call of RollbackStateMachine.
func (mr *MockSFnServiceMockRecorder) RollbackStateMachine(ctx, stateMachine, keepVersion, dryRun any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackStateMachine", reflect.TypeOf((*MockSFnService)(nil).RollbackStateMachine), ctx, stateMachine, keepVersion, dryRun)
}

// SetAliasName mocks base method.
func (m *MockSFnService) SetAliasName(aliasName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAliasName", aliasName)
}

// SetAliasName indicates an expected call of SetAliasName.
func (mr *MockSFnServiceMockRecorder) SetAliasName(aliasName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAliasName", reflect.TypeOf((*MockSFnService)(nil).SetAliasName), aliasName)
}

// StartExecution mocks base method.
func (m *MockSFnService) StartExecution(ctx context.Context, stateMachine *stefunny.StateMachine, params *stefunny.StartExecutionInput) (*stefunny.StartExecutionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartExecution", ctx, stateMachine, params)
	ret0, _ := ret[0].(*stefunny.StartExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartExecution indicates an expected call of StartExecution.
func (mr *MockSFnServiceMockRecorder) StartExecution(ctx, stateMachine, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartExecution", reflect.TypeOf((*MockSFnService)(nil).StartExecution), ctx, stateMachine, params)
}
