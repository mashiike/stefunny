// Code generated by MockGen. DO NOT EDIT.
// Source: scheduler_service.go
//
// Generated by this command:
//
//	mockgen -source=scheduler_service.go -destination=./mock/scheduler_service.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	scheduler "github.com/aws/aws-sdk-go-v2/service/scheduler"
	stefunny "github.com/mashiike/stefunny"
	gomock "go.uber.org/mock/gomock"
)

// MockSchedulerClient is a mock of SchedulerClient interface.
type MockSchedulerClient struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerClientMockRecorder
	isgomock struct{}
}

// MockSchedulerClientMockRecorder is the mock recorder for MockSchedulerClient.
type MockSchedulerClientMockRecorder struct {
	mock *MockSchedulerClient
}

// NewMockSchedulerClient creates a new mock instance.
func NewMockSchedulerClient(ctrl *gomock.Controller) *MockSchedulerClient {
	mock := &MockSchedulerClient{ctrl: ctrl}
	mock.recorder = &MockSchedulerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchedulerClient) EXPECT() *MockSchedulerClientMockRecorder {
	return m.recorder
}

// CreateSchedule mocks base method.
func (m *MockSchedulerClient) CreateSchedule(ctx context.Context, params *scheduler.CreateScheduleInput, optFns ...func(*scheduler.Options)) (*scheduler.CreateScheduleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSchedule", varargs...)
	ret0, _ := ret[0].(*scheduler.CreateScheduleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSchedule indicates an expected call of CreateSchedule.
func (mr *MockSchedulerClientMockRecorder) CreateSchedule(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchedule", reflect.TypeOf((*MockSchedulerClient)(nil).CreateSchedule), varargs...)
}

// DeleteSchedule mocks base method.
func (m *MockSchedulerClient) DeleteSchedule(ctx context.Context, params *scheduler.DeleteScheduleInput, optFns ...func(*scheduler.Options)) (*scheduler.DeleteScheduleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSchedule", varargs...)
	ret0, _ := ret[0].(*scheduler.DeleteScheduleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSchedule indicates an expected call of DeleteSchedule.
func (mr *MockSchedulerClientMockRecorder) DeleteSchedule(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchedule", reflect.TypeOf((*MockSchedulerClient)(nil).DeleteSchedule), varargs...)
}

// GetSchedule mocks base method.
func (m *MockSchedulerClient) GetSchedule(ctx context.Context, params *scheduler.GetScheduleInput, optFns ...func(*scheduler.Options)) (*scheduler.GetScheduleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSchedule", varargs...)
	ret0, _ := ret[0].(*scheduler.GetScheduleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchedule indicates an expected call of GetSchedule.
func (mr *MockSchedulerClientMockRecorder) GetSchedule(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchedule", reflect.TypeOf((*MockSchedulerClient)(nil).GetSchedule), varargs...)
}

// ListScheduleGroups mocks base method.
func (m *MockSchedulerClient) ListScheduleGroups(ctx context.Context, params *scheduler.ListScheduleGroupsInput, optFns ...func(*scheduler.Options)) (*scheduler.ListScheduleGroupsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListScheduleGroups", varargs...)
	ret0, _ := ret[0].(*scheduler.ListScheduleGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListScheduleGroups indicates an expected call of ListScheduleGroups.
func (mr *MockSchedulerClientMockRecorder) ListScheduleGroups(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListScheduleGroups", reflect.TypeOf((*MockSchedulerClient)(nil).ListScheduleGroups), varargs...)
}

// ListSchedules mocks base method.
func (m *MockSchedulerClient) ListSchedules(ctx context.Context, params *scheduler.ListSchedulesInput, optFns ...func(*scheduler.Options)) (*scheduler.ListSchedulesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSchedules", varargs...)
	ret0, _ := ret[0].(*scheduler.ListSchedulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSchedules indicates an expected call of ListSchedules.
func (mr *MockSchedulerClientMockRecorder) ListSchedules(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchedules", reflect.TypeOf((*MockSchedulerClient)(nil).ListSchedules), varargs...)
}

// UpdateSchedule mocks base method.
func (m *MockSchedulerClient) UpdateSchedule(ctx context.Context, params *scheduler.UpdateScheduleInput, optFns ...func(*scheduler.Options)) (*scheduler.UpdateScheduleOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSchedule", varargs...)
	ret0, _ := ret[0].(*scheduler.UpdateScheduleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSchedule indicates an expected call of UpdateSchedule.
func (mr *MockSchedulerClientMockRecorder) UpdateSchedule(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchedule", reflect.TypeOf((*MockSchedulerClient)(nil).UpdateSchedule), varargs...)
}

// MockSchedulerService is a mock of SchedulerService interface.
type MockSchedulerService struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerServiceMockRecorder
	isgomock struct{}
}

// MockSchedulerServiceMockRecorder is the mock recorder for MockSchedulerService.
type MockSchedulerServiceMockRecorder struct {
	mock *MockSchedulerService
}

// NewMockSchedulerService creates a new mock instance.
func NewMockSchedulerService(ctrl *gomock.Controller) *MockSchedulerService {
	mock := &MockSchedulerService{ctrl: ctrl}
	mock.recorder = &MockSchedulerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchedulerService) EXPECT() *MockSchedulerServiceMockRecorder {
	return m.recorder
}

// DeploySchedules mocks base method.
func (m *MockSchedulerService) DeploySchedules(ctx context.Context, stateMachineArn string, rules stefunny.Schedules, keepState bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeploySchedules", ctx, stateMachineArn, rules, keepState)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeploySchedules indicates an expected call of DeploySchedules.
func (mr *MockSchedulerServiceMockRecorder) DeploySchedules(ctx, stateMachineArn, rules, keepState any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeploySchedules", reflect.TypeOf((*MockSchedulerService)(nil).DeploySchedules), ctx, stateMachineArn, rules, keepState)
}

// SearchRelatedSchedules mocks base method.
func (m *MockSchedulerService) SearchRelatedSchedules(ctx context.Context, params *stefunny.SearchRelatedSchedulesInput) (stefunny.Schedules, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchRelatedSchedules", ctx, params)
	ret0, _ := ret[0].(stefunny.Schedules)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchRelatedSchedules indicates an expected call of SearchRelatedSchedules.
func (mr *MockSchedulerServiceMockRecorder) SearchRelatedSchedules(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchRelatedSchedules", reflect.TypeOf((*MockSchedulerService)(nil).SearchRelatedSchedules), ctx, params)
}
